
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  hashedPassword: 'hashedPassword',
  subscriptionTier: 'subscriptionTier',
  subscriptionId: 'subscriptionId',
  customerId: 'customerId',
  subscriptionEndsAt: 'subscriptionEndsAt',
  monthlyRoasts: 'monthlyRoasts',
  totalRoasts: 'totalRoasts',
  bonusCredits: 'bonusCredits',
  lastRoastReset: 'lastRoastReset',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  usedAt: 'usedAt'
};

exports.Prisma.LlmCallScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  model: 'model',
  operationType: 'operationType',
  totalInputTokens: 'totalInputTokens',
  totalOutputTokens: 'totalOutputTokens',
  totalTokens: 'totalTokens',
  totalCostUsd: 'totalCostUsd',
  totalProcessingTimeMs: 'totalProcessingTimeMs',
  status: 'status',
  errorMessage: 'errorMessage',
  resumeId: 'resumeId',
  extractedResumeId: 'extractedResumeId',
  extractedJobId: 'extractedJobId',
  generatedRoastId: 'generatedRoastId',
  generatedCoverLetterId: 'generatedCoverLetterId',
  generatedResumeId: 'generatedResumeId',
  generatedInterviewPrepId: 'generatedInterviewPrepId',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.LlmMessageScalarFieldEnum = {
  id: 'id',
  llmCallId: 'llmCallId',
  role: 'role',
  content: 'content',
  messageIndex: 'messageIndex',
  inputTokens: 'inputTokens',
  outputTokens: 'outputTokens',
  totalTokens: 'totalTokens',
  costUsd: 'costUsd',
  processingTimeMs: 'processingTimeMs',
  finishReason: 'finishReason',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  filename: 'filename',
  fileHash: 'fileHash',
  mimeType: 'mimeType',
  images: 'images',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ExtractedResumeScalarFieldEnum = {
  id: 'id',
  resumeId: 'resumeId',
  contentHash: 'contentHash',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.ExtractedJobDescriptionScalarFieldEnum = {
  id: 'id',
  contentHash: 'contentHash',
  originalText: 'originalText',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.SummarizedResumeScalarFieldEnum = {
  id: 'id',
  extractedResumeId: 'extractedResumeId',
  contentHash: 'contentHash',
  summary: 'summary',
  createdAt: 'createdAt'
};

exports.Prisma.SummarizedJobDescriptionScalarFieldEnum = {
  id: 'id',
  extractedJobId: 'extractedJobId',
  contentHash: 'contentHash',
  summary: 'summary',
  createdAt: 'createdAt'
};

exports.Prisma.GeneratedRoastScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resumeId: 'resumeId',
  extractedResumeId: 'extractedResumeId',
  extractedJobId: 'extractedJobId',
  contentHash: 'contentHash',
  data: 'data',
  overallScore: 'overallScore',
  createdAt: 'createdAt'
};

exports.Prisma.GeneratedCoverLetterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resumeId: 'resumeId',
  roastId: 'roastId',
  extractedResumeId: 'extractedResumeId',
  extractedJobId: 'extractedJobId',
  contentHash: 'contentHash',
  content: 'content',
  tone: 'tone',
  modelName: 'modelName',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.GeneratedResumeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roastId: 'roastId',
  extractedResumeId: 'extractedResumeId',
  extractedJobId: 'extractedJobId',
  templateId: 'templateId',
  contentHash: 'contentHash',
  content: 'content',
  data: 'data',
  atsScore: 'atsScore',
  keywordsMatched: 'keywordsMatched',
  createdAt: 'createdAt'
};

exports.Prisma.GeneratedInterviewPrepScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roastId: 'roastId',
  extractedResumeId: 'extractedResumeId',
  extractedJobId: 'extractedJobId',
  contentHash: 'contentHash',
  data: 'data',
  difficulty: 'difficulty',
  category: 'category',
  modelName: 'modelName',
  createdAt: 'createdAt'
};

exports.Prisma.InterviewEvaluationScalarFieldEnum = {
  id: 'id',
  interviewPrepId: 'interviewPrepId',
  userId: 'userId',
  evaluationType: 'evaluationType',
  data: 'data',
  questionsCount: 'questionsCount',
  overallScore: 'overallScore',
  createdAt: 'createdAt'
};

exports.Prisma.SharedAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roastId: 'roastId',
  settings: 'settings',
  viewCount: 'viewCount',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  billingPeriodStart: 'billingPeriodStart',
  billingPeriodEnd: 'billingPeriodEnd',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentId: 'stripePaymentId',
  itemCount: 'itemCount',
  generatedAt: 'generatedAt',
  paidAt: 'paidAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  featureName: 'featureName',
  estimatedDate: 'estimatedDate',
  type: 'type',
  ctaText: 'ctaText',
  ctaUrl: 'ctaUrl',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  targetTiers: 'targetTiers',
  dismissedBy: 'dismissedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatbotScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  conversationId: 'conversationId',
  message: 'message',
  role: 'role',
  llmMessageId: 'llmMessageId',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  lastMessageAt: 'lastMessageAt',
  messageCount: 'messageCount',
  selectedTemplate: 'selectedTemplate',
  selectedModel: 'selectedModel',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  messageIndex: 'messageIndex',
  model: 'model',
  template: 'template',
  tokensUsed: 'tokensUsed',
  costUsd: 'costUsd',
  processingTimeMs: 'processingTimeMs',
  hasLatexCode: 'hasLatexCode',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  FREE: 'FREE',
  PLUS: 'PLUS',
  PREMIUM: 'PREMIUM'
};

exports.VerificationTokenType = exports.$Enums.VerificationTokenType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.LlmCallStatus = exports.$Enums.LlmCallStatus = {
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  TIMEOUT: 'TIMEOUT'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  system: 'system',
  user: 'user',
  assistant: 'assistant'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.AnnouncementType = exports.$Enums.AnnouncementType = {
  COMING_SOON: 'COMING_SOON',
  IN_PROGRESS: 'IN_PROGRESS',
  BETA: 'BETA',
  NEW: 'NEW',
  MAINTENANCE: 'MAINTENANCE',
  UPDATE: 'UPDATE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  LlmCall: 'LlmCall',
  LlmMessage: 'LlmMessage',
  Resume: 'Resume',
  ExtractedResume: 'ExtractedResume',
  ExtractedJobDescription: 'ExtractedJobDescription',
  SummarizedResume: 'SummarizedResume',
  SummarizedJobDescription: 'SummarizedJobDescription',
  GeneratedRoast: 'GeneratedRoast',
  GeneratedCoverLetter: 'GeneratedCoverLetter',
  GeneratedResume: 'GeneratedResume',
  GeneratedInterviewPrep: 'GeneratedInterviewPrep',
  InterviewEvaluation: 'InterviewEvaluation',
  SharedAnalysis: 'SharedAnalysis',
  Invoice: 'Invoice',
  Announcement: 'Announcement',
  Chatbot: 'Chatbot',
  Conversation: 'Conversation',
  ConversationMessage: 'ConversationMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
