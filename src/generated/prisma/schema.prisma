// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core Authentication & Users
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")

  // Subscription and billing
  subscriptionTier   SubscriptionTier @default(FREE) @map("subscription_tier")
  subscriptionId     String?          @map("subscription_id")
  customerId         String?          @map("customer_id") // Stripe customer ID
  subscriptionEndsAt DateTime?        @map("subscription_ends_at")

  // Usage tracking
  monthlyRoasts  Int      @default(0) @map("monthly_roasts")
  totalRoasts    Int      @default(0) @map("total_roasts")
  bonusCredits   Int      @default(0) @map("bonus_credits") // One-time purchased credits that don't reset
  lastRoastReset DateTime @default(now()) @map("last_roast_reset")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sessions                Session[]
  llmCalls                LlmCall[]
  resumes                 Resume[]
  generatedRoasts         GeneratedRoast[]
  generatedCoverLetters   GeneratedCoverLetter[]
  generatedResumes        GeneratedResume[]
  generatedInterviewPreps GeneratedInterviewPrep[]
  interviewEvaluations    InterviewEvaluation[]
  sharedAnalyses          SharedAnalysis[]
  invoices                Invoice[]
  chatbot                 Chatbot[]
  verificationTokens      VerificationToken[]
  conversations           Conversation[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String                @id @default(cuid())
  userId    String                @map("user_id")
  token     String                @unique
  type      VerificationTokenType
  expiresAt DateTime              @map("expires_at")
  createdAt DateTime              @default(now()) @map("created_at")
  usedAt    DateTime?             @map("used_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("verification_tokens")
}

// LLM Call Tracking
model LlmCall {
  id     String  @id @default(cuid())
  userId String? @map("user_id") // NULL for anonymous

  // Call metadata
  provider      String // 'openai', 'anthropic', etc.
  model         String // 'gpt-4', 'claude-4-sonnet', etc.
  operationType String @map("operation_type") // 'extract_resume', 'generate_roast', etc.

  // Token usage (aggregated from messages)
  totalInputTokens  Int @default(0) @map("total_input_tokens")
  totalOutputTokens Int @default(0) @map("total_output_tokens")
  totalTokens       Int @default(0) @map("total_tokens")

  // Cost tracking
  totalCostUsd Decimal @default(0) @map("total_cost_usd") @db.Decimal(10, 6)

  // Performance
  totalProcessingTimeMs Int? @map("total_processing_time_ms")

  // Status
  status       LlmCallStatus @default(COMPLETED)
  errorMessage String?       @map("error_message")

  // Relations (what was this call for?)
  resumeId                 String? @map("resume_id")
  extractedResumeId        String? @map("extracted_resume_id")
  extractedJobId           String? @map("extracted_job_id")
  generatedRoastId         String? @map("generated_roast_id")
  generatedCoverLetterId   String? @map("generated_cover_letter_id")
  generatedResumeId        String? @map("generated_resume_id")
  generatedInterviewPrepId String? @map("generated_interview_prep_id")

  createdAt   DateTime  @default(now()) @map("created_at")
  completedAt DateTime? @map("completed_at")

  // Relations
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  resume                 Resume?                  @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  extractedResume        ExtractedResume?         @relation(fields: [extractedResumeId], references: [id], onDelete: SetNull)
  extractedJob           ExtractedJobDescription? @relation(fields: [extractedJobId], references: [id], onDelete: SetNull)
  generatedRoast         GeneratedRoast?          @relation(fields: [generatedRoastId], references: [id], onDelete: SetNull)
  generatedCoverLetter   GeneratedCoverLetter?    @relation(fields: [generatedCoverLetterId], references: [id], onDelete: SetNull)
  generatedResume        GeneratedResume?         @relation(fields: [generatedResumeId], references: [id], onDelete: SetNull)
  generatedInterviewPrep GeneratedInterviewPrep?  @relation(fields: [generatedInterviewPrepId], references: [id], onDelete: SetNull)
  messages               LlmMessage[]

  @@index([userId])
  @@index([provider, model])
  @@index([operationType])
  @@index([createdAt])
  @@index([totalCostUsd])
  @@index([status])
  @@map("llm_calls")
}

// LLM Messages (the actual conversation)
model LlmMessage {
  id        String @id @default(cuid())
  llmCallId String @map("llm_call_id")

  // Message content
  role    MessageRole
  content String      @db.Text

  // Message order in conversation
  messageIndex Int @map("message_index") // 0, 1, 2, etc.

  // Token usage for this specific message
  inputTokens  Int? @map("input_tokens")
  outputTokens Int? @map("output_tokens")
  totalTokens  Int? @map("total_tokens")

  // Cost for this specific message
  costUsd Decimal @default(0) @map("cost_usd") @db.Decimal(10, 6)

  // Performance for this message
  processingTimeMs Int? @map("processing_time_ms")

  // AI-specific metadata
  finishReason String?  @map("finish_reason") // 'stop', 'length', 'content_filter', etc.
  temperature  Decimal? @db.Decimal(3, 2)
  maxTokens    Int?     @map("max_tokens")

  // Additional metadata
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  llmCall LlmCall @relation(fields: [llmCallId], references: [id], onDelete: Cascade)

  @@unique([llmCallId, messageIndex])
  @@index([llmCallId])
  @@index([role])
  @@index([createdAt])
  @@map("llm_messages")
}

// Core Resume Storage
model Resume {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id") // NULL for anonymous
  filename  String
  fileHash  String   @unique @map("file_hash") // SHA-256 for deduplication
  mimeType  String   @map("mime_type")
  images    String[] // Base64 encoded PDF page images
  metadata  Json? // Any additional file metadata
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user                  User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  llmCalls              LlmCall[]
  extractedResumes      ExtractedResume[]
  generatedRoasts       GeneratedRoast[]
  generatedCoverLetters GeneratedCoverLetter[]

  @@index([userId])
  @@index([fileHash])
  @@map("resumes")
}

// Extracted Data (Structured)
model ExtractedResume {
  id          String   @id @default(cuid())
  resumeId    String   @map("resume_id")
  contentHash String   @unique @map("content_hash") // For deduplication
  data        Json // Structured resume data
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  resume                  Resume                   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  llmCalls                LlmCall[]
  summarizedResumes       SummarizedResume[]
  generatedRoasts         GeneratedRoast[]
  generatedCoverLetters   GeneratedCoverLetter[]
  generatedResumes        GeneratedResume[]
  generatedInterviewPreps GeneratedInterviewPrep[]

  @@index([contentHash])
  @@map("extracted_resumes")
}

model ExtractedJobDescription {
  id           String   @id @default(cuid())
  contentHash  String   @unique @map("content_hash") // For deduplication
  originalText String   @map("original_text") @db.Text
  data         Json // Structured job data
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  llmCalls                  LlmCall[]
  summarizedJobDescriptions SummarizedJobDescription[]
  generatedRoasts           GeneratedRoast[]
  generatedCoverLetters     GeneratedCoverLetter[]
  generatedResumes          GeneratedResume[]
  generatedInterviewPreps   GeneratedInterviewPrep[]

  @@index([contentHash])
  @@map("extracted_job_descriptions")
}

// Summarized Data
model SummarizedResume {
  id                String   @id @default(cuid())
  extractedResumeId String   @map("extracted_resume_id")
  contentHash       String   @unique @map("content_hash")
  summary           Json // Summary data
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  extractedResume ExtractedResume @relation(fields: [extractedResumeId], references: [id], onDelete: Cascade)

  @@index([contentHash])
  @@map("summarized_resumes")
}

model SummarizedJobDescription {
  id             String   @id @default(cuid())
  extractedJobId String   @map("extracted_job_id")
  contentHash    String   @unique @map("content_hash")
  summary        Json // Summary data
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  extractedJob ExtractedJobDescription @relation(fields: [extractedJobId], references: [id], onDelete: Cascade)

  @@index([contentHash])
  @@map("summarized_job_descriptions")
}

// Generated Content
model GeneratedRoast {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  resumeId          String?  @map("resume_id")
  extractedResumeId String?  @map("extracted_resume_id")
  extractedJobId    String?  @map("extracted_job_id")
  contentHash       String   @unique @map("content_hash") // For deduplication
  data              Json // Complete roast analysis
  overallScore      Int?     @map("overall_score")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user                    User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  resume                  Resume?                  @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  extractedResume         ExtractedResume?         @relation(fields: [extractedResumeId], references: [id], onDelete: SetNull)
  extractedJob            ExtractedJobDescription? @relation(fields: [extractedJobId], references: [id], onDelete: SetNull)
  llmCalls                LlmCall[]
  sharedAnalyses          SharedAnalysis[]
  generatedCoverLetters   GeneratedCoverLetter[]
  generatedResumes        GeneratedResume[]
  generatedInterviewPreps GeneratedInterviewPrep[]

  @@index([userId])
  @@index([contentHash])
  @@index([overallScore])
  @@map("generated_roasts")
}

model GeneratedCoverLetter {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  resumeId          String?  @map("resume_id")
  roastId           String?  @map("roast_id") // Links to the roast/analysis this cover letter is for
  extractedResumeId String?  @map("extracted_resume_id")
  extractedJobId    String?  @map("extracted_job_id")
  contentHash       String   @unique @map("content_hash")
  content           String   @db.Text // The actual cover letter text
  tone              String   @default("professional")
  modelName         String?  @map("model_name") // The AI model used to generate this
  metadata          Json? // Additional metadata (word count, etc.)
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user            User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  resume          Resume?                  @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  roast           GeneratedRoast?          @relation(fields: [roastId], references: [id], onDelete: SetNull)
  extractedResume ExtractedResume?         @relation(fields: [extractedResumeId], references: [id], onDelete: SetNull)
  extractedJob    ExtractedJobDescription? @relation(fields: [extractedJobId], references: [id], onDelete: SetNull)
  llmCalls        LlmCall[]

  @@index([userId])
  @@index([roastId])
  @@index([contentHash])
  @@map("generated_cover_letters")
}

model GeneratedResume {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  roastId           String?  @map("roast_id") // Optional link to the roast/analysis this resume is for
  extractedResumeId String?  @map("extracted_resume_id")
  extractedJobId    String?  @map("extracted_job_id")
  templateId        String   @map("template_id")
  contentHash       String   @unique @map("content_hash")
  content           String   @db.Text // HTML/Markdown content
  data              Json // Structured data used to generate
  atsScore          Int?     @map("ats_score")
  keywordsMatched   String[] @map("keywords_matched")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user            User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  roast           GeneratedRoast?          @relation(fields: [roastId], references: [id], onDelete: SetNull)
  extractedResume ExtractedResume?         @relation(fields: [extractedResumeId], references: [id], onDelete: SetNull)
  extractedJob    ExtractedJobDescription? @relation(fields: [extractedJobId], references: [id], onDelete: SetNull)
  llmCalls        LlmCall[]

  @@index([userId])
  @@index([roastId])
  @@index([contentHash])
  @@index([atsScore])
  @@map("generated_resumes")
}

// Interview Prep
model GeneratedInterviewPrep {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  roastId           String?  @map("roast_id") // Links to the roast/analysis this prep is for
  extractedResumeId String?  @map("extracted_resume_id")
  extractedJobId    String?  @map("extracted_job_id")
  contentHash       String   @unique @map("content_hash") // For deduplication
  data              Json // Interview questions and answers
  difficulty        String   @default("medium") // easy, medium, hard
  category          String   @default("general") // general, technical, behavioral, situational
  modelName         String?  @map("model_name") // The AI model used to generate this
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user            User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  roast           GeneratedRoast?          @relation(fields: [roastId], references: [id], onDelete: SetNull)
  extractedResume ExtractedResume?         @relation(fields: [extractedResumeId], references: [id], onDelete: SetNull)
  extractedJob    ExtractedJobDescription? @relation(fields: [extractedJobId], references: [id], onDelete: SetNull)
  llmCalls        LlmCall[]
  evaluations     InterviewEvaluation[]

  @@index([userId])
  @@index([roastId])
  @@index([contentHash])
  @@index([difficulty])
  @@index([category])
  @@map("generated_interview_prep")
}

model InterviewEvaluation {
  id              String   @id @default(cuid())
  interviewPrepId String   @map("interview_prep_id") // Links to GeneratedInterviewPrep
  userId          String?  @map("user_id")
  evaluationType  String   @map("evaluation_type") // 'session' or 'individual'
  data            Json // Evaluation results
  questionsCount  Int      @map("questions_count")
  overallScore    Int      @map("overall_score")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user          User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)
  interviewPrep GeneratedInterviewPrep @relation(fields: [interviewPrepId], references: [id], onDelete: Cascade)

  @@index([interviewPrepId])
  @@index([userId])
  @@index([evaluationType])
  @@index([createdAt])
  @@map("interview_evaluations")
}

// Sharing
model SharedAnalysis {
  id        String   @id // Custom shareable ID
  userId    String   @map("user_id")
  roastId   String   @map("roast_id")
  settings  Json?
  viewCount Int      @default(0) @map("view_count")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  roast GeneratedRoast @relation(fields: [roastId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("shared_analyses")
}

// Billing
model Invoice {
  id                 String        @id @default(cuid())
  userId             String        @map("user_id")
  amount             Decimal       @db.Decimal(10, 2)
  currency           String        @default("USD")
  status             InvoiceStatus @default(PENDING)
  billingPeriodStart DateTime      @map("billing_period_start")
  billingPeriodEnd   DateTime      @map("billing_period_end")
  stripeInvoiceId    String?       @unique @map("stripe_invoice_id")
  stripePaymentId    String?       @map("stripe_payment_id")
  itemCount          Int           @map("item_count")
  generatedAt        DateTime      @default(now()) @map("generated_at")
  paidAt             DateTime?     @map("paid_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("invoices")
}

// Feature Announcements
model Announcement {
  id            String             @id @default(cuid())
  title         String
  description   String             @db.Text
  featureName   String?            @map("feature_name")
  estimatedDate String?            @map("estimated_date")
  type          AnnouncementType   @default(COMING_SOON)
  ctaText       String?            @map("cta_text")
  ctaUrl        String?            @map("cta_url")
  isActive      Boolean            @default(true) @map("is_active")
  startDate     DateTime?          @map("start_date")
  endDate       DateTime?          @map("end_date")
  targetTiers   SubscriptionTier[] @map("target_tiers")
  dismissedBy   String[]           @map("dismissed_by") // User IDs who dismissed this
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  @@index([isActive])
  @@index([startDate, endDate])
  @@map("announcements")
}

// Chatbot Support
model Chatbot {
  id             String   @id @default(cuid())
  userId         String?  @map("user_id") // NULL for anonymous users
  anonymousId    String?  @map("anonymous_id") // For non-registered users
  conversationId String   @map("conversation_id") // Groups messages into conversations
  message        String   @db.Text
  role           String // 'user' or 'assistant'
  llmMessageId   String?  @map("llm_message_id") // Optional link to LlmMessage for tracking
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([anonymousId])
  @@index([conversationId])
  @@index([createdAt])
  @@map("chatbot")
}

// Resume Chat Conversations
model Conversation {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  title            String // Auto-generated or user-defined title
  lastMessageAt    DateTime @map("last_message_at")
  messageCount     Int      @default(0) @map("message_count")
  selectedTemplate String?  @map("selected_template") // Last used template
  selectedModel    String?  @map("selected_model") // Last used model
  metadata         Json? // Additional conversation metadata
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ConversationMessage[]

  @@index([userId])
  @@index([lastMessageAt])
  @@index([createdAt])
  @@map("conversations")
}

model ConversationMessage {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  role           MessageRole // system, user, assistant
  content        String      @db.Text
  messageIndex   Int         @map("message_index") // Order within conversation

  // Optional metadata
  model            String? // Model used for this message (if assistant)
  template         String? // Template used (if relevant)
  tokensUsed       Int?     @map("tokens_used")
  costUsd          Decimal? @map("cost_usd") @db.Decimal(10, 6)
  processingTimeMs Int?     @map("processing_time_ms")
  hasLatexCode     Boolean  @default(false) @map("has_latex_code")

  // Additional metadata
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, messageIndex])
  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
  @@map("conversation_messages")
}

// Enums
enum SubscriptionTier {
  FREE
  PLUS
  PREMIUM
}

enum LlmCallStatus {
  COMPLETED
  FAILED
  TIMEOUT
}

enum MessageRole {
  system
  user
  assistant
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum AnnouncementType {
  COMING_SOON
  IN_PROGRESS
  BETA
  NEW
  MAINTENANCE
  UPDATE
}

enum VerificationTokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
