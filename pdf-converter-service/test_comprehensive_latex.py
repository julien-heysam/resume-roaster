#!/usr/bin/env python3

import requests
import json
import sys

# Comprehensive LaTeX test document with various elements
comprehensive_latex = r"""
\documentclass[11pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{enumitem}
\usepackage{fancyhdr}
\usepackage{color}
\usepackage{hyperref}

% Header and footer
\pagestyle{fancy}
\fancyhf{}
\rhead{Resume Roaster Test}
\lfoot{Generated by Tectonic}
\rfoot{\thepage}

\title{\textbf{Comprehensive LaTeX Test Document}}
\author{Resume Roaster Service}
\date{\today}

\begin{document}

\maketitle

\tableofcontents
\newpage

\section{Introduction}
This document tests various LaTeX features to ensure the Tectonic engine produces high-quality PDFs suitable for resume generation and document processing.

\section{Typography and Formatting}

\subsection{Text Styles}
Here we test different text formatting options:
\begin{itemize}
    \item \textbf{Bold text} for emphasis
    \item \textit{Italic text} for style
    \item \underline{Underlined text} for highlighting
    \item \texttt{Monospace text} for code
    \item \textsc{Small Caps Text} for headers
\end{itemize}

\subsection{Font Sizes}
\tiny{Tiny text} \scriptsize{Script size} \footnotesize{Footnote size} \small{Small text} \normalsize{Normal text} \large{Large text} \Large{Larger text} \LARGE{Very large} \huge{Huge} \Huge{Enormous}

\section{Mathematical Expressions}

\subsection{Inline Mathematics}
The quadratic formula is $x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$ and Euler's identity states that $e^{i\pi} + 1 = 0$.

\subsection{Display Mathematics}
\begin{equation}
\int_{-\infty}^{\infty} e^{-x^2} dx = \sqrt{\pi}
\end{equation}

\begin{align}
\nabla \times \vec{E} &= -\frac{\partial \vec{B}}{\partial t} \\
\nabla \times \vec{B} &= \mu_0 \vec{J} + \mu_0 \epsilon_0 \frac{\partial \vec{E}}{\partial t}
\end{align}

\section{Lists and Enumerations}

\subsection{Unordered Lists}
\begin{itemize}
    \item First level item
    \begin{itemize}
        \item Second level item
        \begin{itemize}
            \item Third level item
        \end{itemize}
    \end{itemize}
    \item Another first level item
\end{itemize}

\subsection{Ordered Lists}
\begin{enumerate}
    \item First numbered item
    \item Second numbered item
    \begin{enumerate}
        \item Nested numbered item
        \item Another nested item
    \end{enumerate}
    \item Third numbered item
\end{enumerate}

\subsection{Custom Lists}
\begin{description}
    \item[Skills] Programming, Design, Analysis
    \item[Experience] 5+ years in software development
    \item[Education] Computer Science degree
\end{description}

\section{Tables}

\begin{table}[h]
\centering
\begin{tabular}{|l|c|r|}
\hline
\textbf{Name} & \textbf{Score} & \textbf{Grade} \\
\hline
Alice & 95 & A \\
Bob & 87 & B+ \\
Charlie & 92 & A- \\
\hline
\end{tabular}
\caption{Sample grade table}
\label{tab:grades}
\end{table}

\section{Resume-Style Content}

\subsection{Professional Experience}
\textbf{Senior Software Engineer} \hfill \textit{2020 - Present} \\
\textit{Tech Company Inc.} \hfill \textit{San Francisco, CA}
\begin{itemize}[leftmargin=*]
    \item Led development of microservices architecture serving 1M+ users
    \item Implemented CI/CD pipelines reducing deployment time by 60\%
    \item Mentored junior developers and conducted code reviews
\end{itemize}

\textbf{Software Developer} \hfill \textit{2018 - 2020} \\
\textit{Startup Solutions} \hfill \textit{New York, NY}
\begin{itemize}[leftmargin=*]
    \item Developed full-stack web applications using React and Node.js
    \item Optimized database queries improving performance by 40\%
    \item Collaborated with cross-functional teams in Agile environment
\end{itemize}

\subsection{Education}
\textbf{Master of Science in Computer Science} \hfill \textit{2018} \\
\textit{University of Technology} \hfill \textit{GPA: 3.8/4.0}

\textbf{Bachelor of Science in Software Engineering} \hfill \textit{2016} \\
\textit{State University} \hfill \textit{Magna Cum Laude}

\subsection{Technical Skills}
\begin{itemize}[leftmargin=*]
    \item \textbf{Programming Languages:} Python, JavaScript, Java, C++, Go
    \item \textbf{Frameworks:} React, Node.js, Django, Spring Boot, FastAPI
    \item \textbf{Databases:} PostgreSQL, MongoDB, Redis, Elasticsearch
    \item \textbf{Tools:} Docker, Kubernetes, AWS, Git, Jenkins
\end{itemize}

\section{Special Characters and Symbols}
Testing special characters: \& \% \$ \# \_ \{ \} \textbackslash

Unicode support: café, naïve, résumé, Zürich, москва

Mathematical symbols: $\alpha$, $\beta$, $\gamma$, $\Delta$, $\Omega$, $\infty$, $\sum$, $\prod$, $\int$

\section{Hyperlinks and References}
Visit our website at \href{https://resume-roaster.com}{Resume Roaster} for more information.

See Table \ref{tab:grades} for grade distribution.

\section{Conclusion}
This comprehensive test document demonstrates that the Tectonic LaTeX engine can handle:
\begin{enumerate}
    \item Complex typography and formatting
    \item Mathematical expressions and equations
    \item Various list types and structures
    \item Professional resume-style layouts
    \item Tables and cross-references
    \item Special characters and symbols
    \item Hyperlinks and modern PDF features
\end{enumerate}

The output should be a professionally formatted PDF suitable for resume generation and document processing applications.

\end{document}
"""

def test_comprehensive_latex(base_url):
    """Test the Tectonic endpoint with a comprehensive LaTeX document"""
    print(f"Testing comprehensive LaTeX document at: {base_url}")
    print("=" * 60)
    
    # Test health check first
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            print("✅ Health check passed!")
            print(f"Response: {response.json()}")
        else:
            print(f"❌ Health check failed! Status: {response.status_code}")
            return
    except Exception as e:
        print(f"❌ Health check error: {e}")
        return
    
    print("\nTesting Tectonic LaTeX endpoint with comprehensive document...")
    
    # Test Tectonic endpoint
    endpoint = f"{base_url}/latex-to-pdf-tectonic"
    print(f"Testing endpoint: {endpoint}")
    
    payload = {
        "latex_code": comprehensive_latex,
        "filename": "comprehensive_test.pdf"
    }
    
    try:
        print("Sending comprehensive LaTeX document for compilation...")
        response = requests.post(
            endpoint, 
            json=payload, 
            timeout=60,  # Longer timeout for comprehensive document
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            print("✅ Comprehensive LaTeX compilation successful!")
            
            # Check if it's actually a PDF
            content_type = response.headers.get('content-type', '')
            if 'application/pdf' in content_type:
                print("✅ Response is a valid PDF!")
            else:
                print(f"⚠️  Content type: {content_type}")
            
            # Save the PDF
            filename = "comprehensive_test_output.pdf"
            with open(filename, 'wb') as f:
                f.write(response.content)
            
            pdf_size = len(response.content)
            print(f"📄 PDF size: {pdf_size:,} bytes")
            print(f"📄 PDF saved as '{filename}'")
            
            # Basic PDF validation
            if response.content.startswith(b'%PDF-'):
                print("✅ PDF header is valid!")
            else:
                print("❌ Invalid PDF header!")
            
            if b'%%EOF' in response.content[-100:]:
                print("✅ PDF footer is valid!")
            else:
                print("❌ Invalid PDF footer!")
                
            # Check for LaTeX-specific content in PDF
            content_str = str(response.content)
            checks = [
                ("Title", "Comprehensive LaTeX Test Document" in content_str),
                ("Author", "Resume Roaster Service" in content_str),
                ("Sections", "Professional Experience" in content_str),
                ("Mathematics", "quadratic formula" in content_str or "equation" in content_str),
                ("Tables", "Grade" in content_str or "table" in content_str),
            ]
            
            print("\n📋 Content validation:")
            for check_name, passed in checks:
                status = "✅" if passed else "❌"
                print(f"  {status} {check_name}")
            
        else:
            print(f"❌ Comprehensive LaTeX compilation failed!")
            print(f"Status code: {response.status_code}")
            try:
                error_detail = response.json()
                print(f"Error: {error_detail}")
            except:
                print(f"Error: {response.text[:500]}")
                
    except requests.exceptions.Timeout:
        print("❌ Request timed out (60 seconds)")
    except Exception as e:
        print(f"❌ Request error: {e}")

if __name__ == "__main__":
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
    test_comprehensive_latex(base_url) 